require('chai').use(require('chai-as-promised')).should()

const StakeDepositContractProxy = artifacts.require('StakeDepositContractProxy.sol')
const StakeDepositContract = artifacts.require('StakeDepositContract.sol')
const IERC20 = artifacts.require('IERC20.sol')

const erc20Bytecode = '0x608060405234801561001057600080fd5b5061002e3369021e19e0c9bab24000006001600160e01b0361003316565b6100fe565b6001600160a01b03821661004657600080fd5b61005f816002546100e560201b6107471790919060201c565b6002556001600160a01b0382166000908152602081815260409091205461008f9183906107476100e5821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000828201838110156100f757600080fd5b9392505050565b6107ab8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a0823114610172578063a457c2d7146101a5578063a9059cbb146101de578063dd62ed3e1461021757610088565b8063095ea7b31461008d57806318160ddd146100c857806323b872dd146100e25780633950935114610125575b600080fd5b6100c6600480360360408110156100a357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610252565b005b6100d06102e1565b60408051918252519081900360200190f35b6100c6600480360360608110156100f857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356102e7565b61015e6004803603604081101561013b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104b0565b604080519115158252519081900360200190f35b6100d06004803603602081101561018857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610585565b61015e600480360360408110156101bb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105ad565b6100c6600480360360408110156101f457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610610565b6100d06004803603604081101561022d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661070f565b73ffffffffffffffffffffffffffffffffffffffff821661027257600080fd5b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871680855290835292819020859055805185815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b60025490565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481111561031957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020908152604080832033845290915290205481111561035657600080fd5b73ffffffffffffffffffffffffffffffffffffffff821661037657600080fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020546103ac908263ffffffff61076016565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546103ee908263ffffffff61074716565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526020818152604080832094909455918616815260018252828120338252909152205461043d908263ffffffff61076016565b73ffffffffffffffffffffffffffffffffffffffff808516600081815260016020908152604080832033845282529182902094909455805185815290519286169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3505050565b600073ffffffffffffffffffffffffffffffffffffffff83166104d257600080fd5b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054610513908363ffffffff61074716565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff83166105cf57600080fd5b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054610513908363ffffffff61076016565b3360009081526020819052604090205481111561062c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff821661064c57600080fd5b3360009081526020819052604090205461066c908263ffffffff61076016565b336000908152602081905260408082209290925573ffffffffffffffffffffffffffffffffffffffff8416815220546106ab908263ffffffff61074716565b73ffffffffffffffffffffffffffffffffffffffff8316600081815260208181526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60008282018381101561075957600080fd5b9392505050565b60008282111561076f57600080fd5b5090039056fea2646970667358221220413b90be30b8bbbde06177527a741aa9cb1088991d66b626c76b4167723ee0fc64736f6c634300060b0033'

const deposit = {
  pubkey: '0x8c62001af9df31afb32ef00d6021b3e42de768816a9533d1830eab747d03875439109e5d9a505c438ba504032d0b482e',
  withdrawal_credentials: '0x005f22a31cc637852f43f58495f8fcd9bbeac274dbd235378294cd495ce15e39',
  signature: '0x89d59b2a502be0ec507c2a0f9fd259c95af87e16ce0d579d75267e2a9812f221e61de018827b144646944c3a2e6a25c90f7a1134eae90a8da6ff8be652a50184dd6c39aa97b7b20d673e6a107bae51b9952f001f6543f37bd67f007a81f4157b',
  deposit_data_root: '0x19661b673ed6ad8a6637cc73d61a44bcbdf2f77ff6c5aa2d221aa0cec8bec0a2',
  value: '32000000000000000000'
}

contract('StakeDepositContractProxy', (accounts) => {
  let contract
  let proxy
  let stake
  beforeEach(async () => {
    IERC20.bytecode = erc20Bytecode
    stake = await IERC20.new()
    proxy = await StakeDepositContractProxy.new(accounts[0], stake.address)
    contract = await StakeDepositContract.at(proxy.address)
  })

  it('should deposit', async () => {
    await contract.deposit(
      deposit.pubkey,
      deposit.withdrawal_credentials,
      deposit.signature,
      deposit.deposit_data_root,
      deposit.value
    ).should.be.rejected
    await stake.approve(proxy.address, '32000000000000000000').should.be.fulfilled
    await contract.deposit(
      deposit.pubkey,
      deposit.withdrawal_credentials,
      deposit.signature,
      deposit.deposit_data_root,
      deposit.value
    )
    expect(await contract.get_deposit_root()).to.be.equal('0x9d4bfae6f4c10297411c38caae32a340fcfd6502a0d1fead5f0f533eb6be6aa0')
  })

  it('should upgrade', async () => {
    const impl = await StakeDepositContract.new(stake.address)
    await proxy.upgradeTo(impl.address, { from: accounts[1] }).should.be.rejected
    await proxy.upgradeTo(impl.address, { from: accounts[0] })
    expect(await proxy.implementation()).to.be.equal(impl.address)
  })

  it('should set admin', async () => {
    await proxy.setAdmin(accounts[2], { from: accounts[1] }).should.be.rejected
    await proxy.setAdmin(accounts[2], { from: accounts[0] })
    expect(await proxy.admin()).to.be.equal(accounts[2])
  })

  it('should claim tokens', async () => {
    const token = await IERC20.new()
    await stake.transfer(proxy.address, 1)
    await token.transfer(proxy.address, 1)

    await contract.claimTokens(token.address, accounts[2], { from: accounts[1] }).should.be.rejected
    await contract.claimTokens(stake.address, accounts[2], { from: accounts[0] }).should.be.rejected
    await contract.claimTokens(token.address, accounts[2], { from: accounts[0] })
    expect((await token.balanceOf(accounts[2])).toString()).to.be.equal('1')
  })
})
